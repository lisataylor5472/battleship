class Gameplay
  attr_reader :computer_player,
              :user_player,
              :user_board,
              :computer_player_board,
              :cruiser,
              :submarine

  def initialize
    @computer_player = computer_player
    @user_player = user_player
    @computer_player_board = Board.new
    @user_board = Board.new
    @cruiser = Ship.new("Cruiser", 3)
    @submarine = Ship.new("Submarine", 2)
  end

  def start
    puts "Welcome to Battleship!!!"
    puts"
                               # #  ( )
                            ___#_#___|__
                        _  |____________|  _
                 _=====| | |            | | |==== _
           =====| |.---------------------------. | |====
    <--------------------'   .  .  .  .  .  .  .  .   '--------------/
    \                                      SS Becky and Lisa       /
      \_______________________________________________WWS_________/
    wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
    wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
    wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww "
    puts "Enter p to play. Enter q to quit."

    input = gets.chomp
      if input == 'p'

    computer_place_ship(@cruiser)
    computer_place_ship(@submarine)

    puts "I have laid out my ships on the grid."
    puts "You now need to lay out your two ships"
    puts "The Cruiser is three units long and the Submarine is two units long."

    puts "#{user_board.render}" +
        "Enter the squares for the Cruiser (3 spaces):"

    user_place_ship(cruiser, gets.chomp)

    puts "#{user_board.render(true)}" +
          "Enter the squares for the Submarine (2 spaces):"

    user_place_ship(submarine, gets.chomp)

    puts "#{user_board.render(true)}"

    #The turns begins
    #take_turn
    #The user sees both boards
    #The user inputs coordionates to fire on
    #The computer selects coordinates to fire upon
    #The results are reported


    end
  end

  def input_coords(gets_coords)
    placement_coords = gets_coords.split(" ").to_a
  end


  def user_place_ship(ship, gets_coords)
    #computer_player ship placement is autogenerated by computer
    placement_coords = gets_coords.split(" ").to_a
    if @user_board.valid_placement?(ship, placement_coords) == true
      @user_board.place(ship, placement_coords)
    elsif @user_board.valid_placement?(ship, placement_coords) == false
      puts "Those are invalid coordinates. Please try again:"
      user_place_ship(ship, gets.chomp)
    end
  end

  def computer_place_ship(ship)
    a = random_coords(ship)
    if @computer_player_board.valid_placement?(ship, a) == true
      @computer_player_board.place(ship, a)
    elsif @computer_player_board.valid_placement?(ship, a) == false
      computer_place_ship(ship)
    end
  end

  def random_coords(ship)
    @computer_player_board.cells.keys.sample(ship.length)
  end

  def take_turn
    puts "=============COMPUTER BOARD============="
    puts "#{@computer_player_board.render}"
    puts "==============PLAYER BOARD=============="
    puts "#{@user_board.render(true)}"

    puts "Enter the coordinate for your shot:"
    #User fires on computers' board
    input = gets.chomp.split(" ").to_a
      if @computer_player_board.valid_placement?(ship, input) == true
         @computer_player_board.cells[input].fire_upon
      elsif
        puts "Please enter a valid coordinate:"
        input = gets.chomp.split(" ").to_a
    end
  end
end
